{
  "name": "unicode-properties",
  "version": "1.1.0",
  "description": "Provides fast access to unicode character properties",
  "directories": {
    "test": "test"
  },
  "dependencies": {
    "brfs": "^1.4.0",
    "unicode-trie": "^0.3.0"
  },
  "devDependencies": {
    "codepoints": "^1.2.0",
    "coffee-script": "^1.9.1",
    "mocha": "^2.2.1"
  },
  "scripts": {
    "test": "mocha",
    "prepublish": "coffee generate.coffee && coffee -cb index.coffee",
    "postpublish": "rm -f index.js"
  },
  "browserify": {
    "transform": [
      "brfs"
    ]
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/devongovett/unicode-properties.git"
  },
  "keywords": [
    "unicode",
    "metadata",
    "character",
    "codepoint"
  ],
  "author": {
    "name": "Devon Govett",
    "email": "devongovett@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/devongovett/unicode-properties/issues"
  },
  "homepage": "https://github.com/devongovett/unicode-properties",
  "readme": "# unicode-properties\n\nProvides fast access to unicode character properties. Uses [unicode-trie](https://github.com/devongovett/unicode-trie) to compress the \nproperties for all code points into just 12KB.\n\n## Usage\n\n    npm install unicode-properties\n\n```javascript\nvar unicode = require('unicode-properties');\n\nunicode.getCategory('2'.charCodeAt()) //=> 'Nd'\nunicode.getNumericValue('2'.charCodeAt()) //=> 2\n```\n\n## API\n\n### getCategory(codePoint)\n\nReturns the unicode [general category](http://www.fileformat.info/info/unicode/category/index.htm) for the given code point.\n\n### getScript(codePoint)\n\nReturns the [script](http://unicode.org/standard/supported.html) for the given code point.\n\n### getCombiningClass(codePoint)\n\nReturns the [canonical combining class](http://unicode.org/glossary/#combining_class) for the given code point.\n\n### getEastAsianWidth(codePoint)\n\nReturns the [East Asian width](http://www.unicode.org/reports/tr11/tr11-28.html) for the given code point.\n\n### getNumericValue(codePoint)\n\nReturns the numeric value for the given code point, or null if there is no numeric value for that code point.\n\n### isAlphabetic(codePoint)\n\nReturns whether the code point is an alphabetic character.\n\n### isDigit(codePoint)\n\nReturns whether the code point is a digit.\n\n### isPunctuation(codePoint)\n\nReturns whether the code point is a punctuation character.\n\n### isLowerCase(codePoint)\n\nReturns whether the code point is lower case.\n\n### isUpperCase(codePoint)\n\nReturns whether the code point is upper case.\n\n### isTitleCase(codePoint)\n\nReturns whether the code point is title case.\n\n### isWhiteSpace(codePoint)\n\nReturns whether the code point is whitespace: specifically, whether the category is one of Zs, Zl, or Zp.\n\n### isBaseForm(codePoint)\n\nReturns whether the code point is a base form. A code point of base form does not graphically combine with preceding\ncharacters.\n\n### isMark(codePoint)\n\nReturns whether the code point is a mark character (e.g. accent).\n\n## License\n\nMIT\n",
  "readmeFilename": "readme.md",
  "_id": "unicode-properties@1.1.0",
  "dist": {
    "shasum": "4e282be7d7ff122bf62cb662efc14d3196be0fb0"
  },
  "_from": "unicode-properties@^1.0.0",
  "_resolved": "https://registry.npmjs.org/unicode-properties/-/unicode-properties-1.1.0.tgz"
}
