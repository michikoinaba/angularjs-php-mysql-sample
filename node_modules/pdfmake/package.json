{
  "name": "pdfmake",
  "version": "0.1.24",
  "description": "Client/server side PDF printing in pure JavaScript",
  "main": "src/printer.js",
  "directories": {
    "test": "tests"
  },
  "dependencies": {
    "pdfkit": "^0.8.0",
    "lodash": "^4.17.3"
  },
  "devDependencies": {
    "expose-loader": "^0.7.1",
    "gulp": "^3.9.1",
    "gulp-jshint": "^2.0.4",
    "gulp-rename": "^1.2.2",
    "gulp-replace": "^0.5.4",
    "gulp-sourcemaps": "^1.9.1",
    "gulp-spawn-mocha": "^3.1.0",
    "gulp-uglify": "^2.0.0",
    "gulp-util": "^3.0.8",
    "gulp-each": "^0.2.0",
    "gulp-file-contents-to-json": "^0.2.1",
    "linebreak": "^0.3.0",
    "iconv-lite": "^0.4.15",
    "json-loader": "^0.5.4",
    "sinon": "^1.17.7",
    "mocha": "^3.2.0",
    "jshint": "^2.9.4",
    "string-replace-webpack-plugin": "^0.0.4",
    "transform-loader": "^0.2.3",
    "brfs": "^1.4.3",
    "webpack": "^1.14.0",
    "webpack-stream": "^3.2.0"
  },
  "scripts": {
    "build": "gulp build",
    "test": "gulp"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/bpampuch/pdfmake.git"
  },
  "keywords": [
    "pdf",
    "javascript",
    "printing",
    "layout"
  ],
  "author": {
    "name": "Bartek Pampuch",
    "email": "bartosz.pampuch@gmail.com"
  },
  "license": "MIT",
  "bugs": {
    "url": "https://github.com/bpampuch/pdfmake/issues"
  },
  "homepage": "http://pdfmake.org",
  "config": {
    "blanket": {
      "pattern": "src",
      "data-cover-never": [
        "node_modules",
        "tests"
      ]
    }
  },
  "readme": "pdfmake [![Build Status](https://travis-ci.org/bpampuch/pdfmake.png?branch=master)](https://travis-ci.org/bpampuch/pdfmake) [![NPM version](https://badge.fury.io/js/pdfmake.png)](http://badge.fury.io/js/pdfmake) [![Bower version](https://badge.fury.io/bo/pdfmake.png)](http://badge.fury.io/bo/pdfmake) [![Latest Version](https://img.shields.io/packagist/v/bpampuch/pdfmake.svg)](https://packagist.org/packages/bpampuch/pdfmake)\r\n=======\r\n\r\nClient/server side PDF printing in pure JavaScript\r\n\r\nCheck out [the playground](http://bpampuch.github.io/pdfmake/playground.html)\r\n\r\n### Features\r\n\r\n* line-wrapping,\r\n* text-alignments (left, right, centered, justified),\r\n* numbered and bulleted lists,\r\n* tables and columns\r\n * auto/fixed/star-sized widths,\r\n * col-spans and row-spans,\r\n * headers automatically repeated in case of a page-break,\r\n* images and vector graphics,\r\n* convenient styling and style inheritance,\r\n* page headers and footers:\r\n * static or dynamic content,\r\n * access to current page number and page count,\r\n* background-layer\r\n* page dimensions and orientations,\r\n* margins,\r\n* custom page breaks,\r\n* font embedding,\r\n* support for complex, multi-level (nested) structures,\r\n* helper methods for opening/printing/downloading the generated PDF.\r\n* setting of PDF metadata (e.g. author, subject)\r\n\r\n## Getting Started\r\n\r\nThis document will walk you through the basics of pdfmake and will show you how to create PDF files in the browser. If you're interested in server-side printing check the examples folder.\r\n\r\nTo begin with the default configuration, you should include two files:\r\n\r\n* **pdfmake.min.js**,\r\n* **vfs_fonts.js** - default font definition (it contains Roboto, you can however [use custom fonts instead](https://github.com/bpampuch/pdfmake/wiki/Custom-Fonts---client-side))\r\n\r\n```html\r\n<!doctype html>\r\n<html lang='en'>\r\n<head>\r\n  <meta charset='utf-8'>\r\n  <title>my first pdfmake example</title>\r\n  <script src='build/pdfmake.min.js'></script>\r\n  <script src='build/vfs_fonts.js'></script>\r\n</head>\r\n<body>\r\n...\r\n```\r\n\r\nYou can get both files using npm:\r\n```\r\nnpm install pdfmake\r\n```\r\n\r\nor bower:\r\n```\r\nbower install pdfmake\r\n```\r\n\r\nor copy them directly from the build directory from the repository. Otherwise you can always [build it from sources](#building-from-sources).\r\n\r\n### Document-definition-object\r\n\r\npdfmake follows a declarative approach. It basically means, you'll never have to calculate positions manually or use commands like: ```writeText(text, x, y)```, ```moveDown``` etc..., as you would with a lot of other libraries.\r\n\r\nThe most fundamental concept to be mastered is the document-definition-object which can be as simple as:\r\n\r\n```js\r\nvar docDefinition = { content: 'This is an sample PDF printed with pdfMake' };\r\n```\r\n\r\nor become pretty complex (having multi-level tables, images, lists, paragraphs, margins, styles etc...).\r\n\r\nAs soon as you have the document-definition-object, you're ready to create and open/print/download the PDF:\r\n\r\n```js\r\n// open the PDF in a new window\r\npdfMake.createPdf(docDefinition).open();\r\n\r\n// print the PDF\r\npdfMake.createPdf(docDefinition).print();\r\n\r\n// download the PDF\r\npdfMake.createPdf(docDefinition).download();\r\n\r\n// put the PDF into your own page as URL data\r\nconst pdfDocGenerator = pdfMake.createPdf(docDefinition);\r\npdfDocGenerator.getDataUrl((dataUrl) => {\r\n\tconst targetElement = document.querySelector('#iframeContainer');\r\n\tconst iframe = document.createElement('iframe');\r\n\tiframe.src = dataUrl;\r\n\ttargetElement.appendChild(iframe);\r\n});\r\n\r\n// get the PDF as base64 data\r\nconst pdfDocGenerator = pdfMake.createPdf(docDefinition);\r\npdfDocGenerator.getBase64((data) => {\r\n\talert(data);\r\n});\r\n\r\n// or get the PDF as buffer\r\nconst pdfDocGenerator = pdfMake.createPdf(docDefinition);\r\npdfDocGenerator.getBuffer((buffer) => {\r\n\t// ...\r\n});\r\n```\r\n\r\n#### Styling\r\npdfmake makes it possible to style any paragraph or its part:\r\n\r\n```js\r\nvar docDefinition = {\r\n  content: [\r\n    // if you don't need styles, you can use a simple string to define a paragraph\r\n    'This is a standard paragraph, using default style',\r\n\r\n    // using a { text: '...' } object lets you set styling properties\r\n    { text: 'This paragraph will have a bigger font', fontSize: 15 },\r\n\r\n    // if you set the value of text to an array instead of a string, you'll be able\r\n    // to style any part individually\r\n    {\r\n      text: [\r\n        'This paragraph is defined as an array of elements to make it possible to ',\r\n        { text: 'restyle part of it and make it bigger ', fontSize: 15 },\r\n        'than the rest.'\r\n      ]\r\n    }\r\n  ]\r\n};\r\n```\r\n\r\n#### Style dictionaries\r\nIt's also possible to define a dictionary of reusable styles:\r\n\r\n```js\r\nvar docDefinition = {\r\n  content: [\r\n    { text: 'This is a header', style: 'header' },\r\n    'No styling here, this is a standard paragraph',\r\n    { text: 'Another text', style: 'anotherStyle' },\r\n    { text: 'Multiple styles applied', style: [ 'header', 'anotherStyle' ] }\r\n  ],\r\n\r\n  styles: {\r\n    header: {\r\n      fontSize: 22,\r\n      bold: true\r\n    },\r\n    anotherStyle: {\r\n      italics: true,\r\n      alignment: 'right'\r\n    }\r\n  }\r\n};\r\n\r\n```\r\n\r\nTo have a deeper understanding of styling in pdfmake, style inheritance and local-style-overrides check STYLES1, STYLES2 and STYLES3 examples in playground.\r\n\r\n#### Columns\r\n\r\nBy default paragraphs are rendered as a vertical stack of elements (one below another). It is possible however to divide available space into columns.\r\n\r\n```js\r\nvar docDefinition = {\r\n  content: [\r\n    'This paragraph fills full width, as there are no columns. Next paragraph however consists of three columns',\r\n    {\r\n      columns: [\r\n        {\r\n          // auto-sized columns have their widths based on their content\r\n          width: 'auto',\r\n          text: 'First column'\r\n        },\r\n        {\r\n          // star-sized columns fill the remaining space\r\n          // if there's more than one star-column, available width is divided equally\r\n          width: '*',\r\n          text: 'Second column'\r\n        },\r\n        {\r\n          // fixed width\r\n          width: 100,\r\n          text: 'Third column'\r\n        },\r\n        {\r\n          // % width\r\n          width: '20%',\r\n          text: 'Fourth column'\r\n        }\r\n      ],\r\n      // optional space between columns\r\n      columnGap: 10\r\n    },\r\n    'This paragraph goes below all columns and has full width'\r\n  ]\r\n};\r\n\r\n```\r\n\r\nColumn content is not limited to a simple text. It can actually contain any valid pdfmake element. Make sure to look at the COLUMNS example in playground.\r\n\r\n#### Tables\r\n\r\nConceptually tables are similar to columns. They can however have headers, borders and cells spanning over multiple columns/rows.\r\n\r\n```js\r\nvar docDefinition = {\r\n  content: [\r\n    {\r\n      layout: 'lightHorizontalLines', // optional\r\n      table: {\r\n        // headers are automatically repeated if the table spans over multiple pages\r\n        // you can declare how many rows should be treated as headers\r\n        headerRows: 1,\r\n        widths: [ '*', 'auto', 100, '*' ],\r\n\r\n        body: [\r\n          [ 'First', 'Second', 'Third', 'The last one' ],\r\n          [ 'Value 1', 'Value 2', 'Value 3', 'Value 4' ],\r\n          [ { text: 'Bold value', bold: true }, 'Val 2', 'Val 3', 'Val 4' ]\r\n        ]\r\n      }\r\n    }\r\n  ]\r\n};\r\n```\r\n\r\n##### Own table layouts\r\n\r\nOwn table layouts must be defined before calling `pdfMake.createPdf(docDefinition)`.\r\n```js\r\npdfMake.tableLayouts = {\r\n  exampleLayout: {\r\n    hLineWidth: function (i, node) {\r\n      if (i === 0 || i === node.table.body.length) {\r\n        return 0;\r\n      }\r\n      return (i === node.table.headerRows) ? 2 : 1;\r\n    },\r\n    vLineWidth: function (i) {\r\n      return 0;\r\n    },\r\n    hLineColor: function (i) {\r\n      return i === 1 ? 'black' : '#aaa';\r\n    },\r\n    paddingLeft: function (i) {\r\n      return i === 0 ? 0 : 8;\r\n    },\r\n    paddingRight: function (i, node) {\r\n      return (i === node.table.widths.length - 1) ? 0 : 8;\r\n    }\r\n  }\r\n};\r\n\r\n// download the PDF\r\npdfMake.createPdf(docDefinition).download();\r\n```\r\n\r\nAll concepts related to tables are covered by TABLES example in playground.\r\n\r\n#### Lists\r\n\r\npdfMake supports both numbered and bulleted lists:\r\n\r\n```js\r\nvar docDefinition = {\r\n  content: [\r\n    'Bulleted list example:',\r\n    {\r\n      // to treat a paragraph as a bulleted list, set an array of items under the ul key\r\n      ul: [\r\n        'Item 1',\r\n        'Item 2',\r\n        'Item 3',\r\n        { text: 'Item 4', bold: true },\r\n      ]\r\n    },\r\n\r\n    'Numbered list example:',\r\n    {\r\n      // for numbered lists set the ol key\r\n      ol: [\r\n        'Item 1',\r\n        'Item 2',\r\n        'Item 3'\r\n      ]\r\n    }\r\n  ]\r\n};\r\n```\r\n\r\n#### Headers and footers\r\n\r\nPage headers and footers in pdfmake can be: *static* or *dynamic*.\r\n\r\nThey use the same syntax:\r\n\r\n```js\r\nvar docDefinition = {\r\n  header: 'simple text',\r\n\r\n  footer: {\r\n    columns: [\r\n      'Left part',\r\n      { text: 'Right part', alignment: 'right' }\r\n    ]\r\n  },\r\n\r\n  content: (...)\r\n};\r\n```\r\n\r\nFor dynamically generated content (including page numbers, page count and page size) you can pass a function to the header or footer:\r\n\r\n```js\r\nvar docDefinition = {\r\n  footer: function(currentPage, pageCount) { return currentPage.toString() + ' of ' + pageCount; },\r\n  header: function(currentPage, pageCount, pageSize) {\r\n    // you can apply any logic and return any valid pdfmake element\r\n\r\n    return [\r\n      { text: 'simple text', alignment: (currentPage % 2) ? 'left' : 'right' },\r\n      { canvas: [ { type: 'rect', x: 170, y: 32, w: pageSize.width - 170, h: 40 } ] }\r\n    ]\r\n  },\r\n  (...)\r\n};\r\n```\r\n\r\n#### Background-layer\r\n\r\nThe background-layer will be added on every page.\r\n\r\n```js\r\nvar docDefinition = {\r\n  background: 'simple text',\r\n\r\n  content: (...)\r\n};\r\n```\r\n\r\nIt may contain any other object as well (images, tables, ...) or be dynamically generated:\r\n\r\n```js\r\nvar docDefinition = {\r\n  background: function(currentPage) {\r\n    return 'simple text on page ' + currentPage\r\n  },\r\n\r\n  content: (...)\r\n};\r\n```\r\n\r\n#### Margins\r\n\r\nAny element in pdfMake can have a margin:\r\n\r\n```js\r\n(...)\r\n// margin: [left, top, right, bottom]\r\n{ text: 'sample', margin: [ 5, 2, 10, 20 ] },\r\n\r\n// margin: [horizontal, vertical]\r\n{ text: 'another text', margin: [5, 2] },\r\n\r\n// margin: equalLeftTopRightBottom\r\n{ text: 'last one', margin: 5 }\r\n(...)\r\n```\r\n\r\n#### Stack of paragraphs\r\n\r\nYou could have figured out by now (from the examples), that if you set the ```content``` key to an array, the  document becomes a stack of paragraphs.\r\n\r\nYou'll quite often reuse this structure in a nested element, like in the following example:\r\n```js\r\nvar docDefinition = {\r\n  content: [\r\n    'paragraph 1',\r\n    'paragraph 2',\r\n    {\r\n      columns: [\r\n        'first column is a simple text',\r\n        [\r\n          // second column consists of paragraphs\r\n          'paragraph A',\r\n          'paragraph B',\r\n          'these paragraphs will be rendered one below another inside the column'\r\n        ]\r\n      ]\r\n    }\r\n  ]\r\n};\r\n```\r\n\r\nThe problem with an array is that you cannot add styling properties to it (to change fontSize for example).\r\n\r\nThe good news is - array is just a shortcut in pdfMake for { stack: [] }, so if you want to restyle the whole stack, you can do it using the expanded definition:\r\n```js\r\nvar docDefinition = {\r\n  content: [\r\n    'paragraph 1',\r\n    'paragraph 2',\r\n    {\r\n      columns: [\r\n        'first column is a simple text',\r\n        {\r\n          stack: [\r\n            // second column consists of paragraphs\r\n            'paragraph A',\r\n            'paragraph B',\r\n            'these paragraphs will be rendered one below another inside the column'\r\n          ],\r\n          fontSize: 15\r\n        }\r\n      ]\r\n    }\r\n  ]\r\n};\r\n```\r\n\r\n#### Images\r\n\r\nThis is simple. Just use the ```{ image: '...' }``` node type.\r\n\r\nJPEG and PNG formats are supported.\r\n\r\n```js\r\nvar docDefinition = {\r\n  content: [\r\n    {\r\n      // you'll most often use dataURI images on the browser side\r\n      // if no width/height/fit is provided, the original size will be used\r\n      image: 'data:image/jpeg;base64,...encodedContent...'\r\n    },\r\n    {\r\n      // if you specify width, image will scale proportionally\r\n      image: 'data:image/jpeg;base64,...encodedContent...',\r\n      width: 150\r\n    },\r\n    {\r\n      // if you specify both width and height - image will be stretched\r\n      image: 'data:image/jpeg;base64,...encodedContent...',\r\n      width: 150,\r\n      height: 150\r\n    },\r\n    {\r\n      // you can also fit the image inside a rectangle\r\n      image: 'data:image/jpeg;base64,...encodedContent...',\r\n      fit: [100, 100]\r\n    },\r\n    {\r\n      // if you reuse the same image in multiple nodes,\r\n      // you should put it to to images dictionary and reference it by name\r\n      image: 'mySuperImage'\r\n    },\r\n    {\r\n      // under NodeJS (or in case you use virtual file system provided by pdfmake)\r\n      // you can also pass file names here\r\n      image: 'myImageDictionary/image1.jpg'\r\n    }\r\n  ],\r\n\r\n  images: {\r\n    mySuperImage: 'data:image/jpeg;base64,...content...'\r\n  }\r\n};\r\n```\r\n\r\n\r\n#### Page dimensions, orientation and margins\r\n\r\n```js\r\nvar docDefinition = {\r\n  // a string or { width: number, height: number }\r\n  pageSize: 'A5',\r\n\r\n  // by default we use portrait, you can change it to landscape if you wish\r\n  pageOrientation: 'landscape',\r\n\r\n  // [left, top, right, bottom] or [horizontal, vertical] or just a number for equal margins\r\n  pageMargins: [ 40, 60, 40, 60 ],\r\n};\r\n```\r\n\r\nIf you set ```pageSize``` to a string, you can use one of the following values:\r\n* '4A0', '2A0', 'A0', 'A1', 'A2', 'A3', 'A4', 'A5', 'A6', 'A7', 'A8', 'A9', 'A10',\r\n* 'B0', 'B1', 'B2', 'B3', 'B4', 'B5', 'B6', 'B7', 'B8', 'B9', 'B10',\r\n* 'C0', 'C1', 'C2', 'C3', 'C4', 'C5', 'C6', 'C7', 'C8', 'C9', 'C10',\r\n* 'RA0', 'RA1', 'RA2', 'RA3', 'RA4',\r\n* 'SRA0', 'SRA1', 'SRA2', 'SRA3', 'SRA4',\r\n* 'EXECUTIVE', 'FOLIO', 'LEGAL', 'LETTER', 'TABLOID'\r\n\r\nTo change page orientation within a document, add a page break with the new page orientation.\r\n\r\n```js\r\n{\r\n  pageOrientation: 'portrait',\r\n  content: [\r\n    {text: 'Text on Portrait'},\r\n    {text: 'Text on Landscape', pageOrientation: 'landscape', pageBreak: 'before'},\r\n    {text: 'Text on Landscape 2', pageOrientation: 'portrait', pageBreak: 'after'},\r\n    {text: 'Text on Portrait 2'},\r\n  ]\r\n}\r\n```\r\n\r\n#### Document Metadata\r\n\r\n(From PdfKit Guide)\r\nPDF documents can have various metadata associated with them, such as the title, or author\r\nof the document. You can add that information by adding it to the document definition\r\n\r\n```js\r\nvar docDefinition = {\r\n  info: {\r\n\ttitle: 'awesome Document',\r\n\tauthor: 'john doe',\r\n\tsubject: 'subject of document',\r\n\tkeywords: 'keywords for document',\r\n  },\r\n  content:  'This is an sample PDF printed with pdfMake'\r\n}\r\n```\r\n\r\n#### Compression\r\n\r\nCompression of PDF is enabled by default, use `compress: false` for disable:\r\n\r\n```js\r\nvar docDefinition = {\r\n  compress: false,\r\n\r\n  content: (...)\r\n};\r\n```\r\n\r\n## Building from sources\r\n\r\n```\r\ngit clone https://github.com/bpampuch/pdfmake.git\r\ncd pdfmake\r\nnpm install # or: yarn\r\ngit submodule update --init  libs/FileSaver.js\r\nnpm run build # or: yarn run build\r\n```\r\n\r\n## Coming soon\r\nHmmm... let me know what you need ;)\r\n\r\nThe goal is quite simple - make pdfmake useful for a looooooooot of people and help building responsive HTML5 apps with printing support.\r\n\r\nThere's one thing on the roadmap for v2 (no deadline however) - make the library hackable, so you can write plugins to:\r\n* extend document-definition-model (with things like { chart: ... }),\r\n* add syntax translators (like the provided [ ... ] -> { stack: [ ... ] }\r\n* build custom DSLs on top of document-definition-model (this is actually possible at the moment).\r\n\r\n\r\n## License\r\nMIT\r\n\r\n-------\r\n\r\npdfmake is based on a truly amazing library pdfkit.org - credits to @devongovett\r\n\r\nbig thanks to @yelouafi for making this library even better\r\n",
  "readmeFilename": "README.md",
  "_id": "pdfmake@0.1.24",
  "dist": {
    "shasum": "cb4c950ddd0888429d35cb46fc2aa5282a42bf22"
  },
  "_from": "pdfmake@",
  "_resolved": "https://registry.npmjs.org/pdfmake/-/pdfmake-0.1.24.tgz"
}
